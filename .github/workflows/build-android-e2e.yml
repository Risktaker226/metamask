name: Build Android E2E APKs (Ultra-AutoMagic)

on:
  workflow_call:
    inputs:
      build_type:
        description: "The type of build to perform"
        required: false
        default: "main"
        type: string
      metamask_environment:
        description: "The environment to build for (qa/live)"
        required: false
        default: "qa"
        type: string

jobs:
  build-android-apks:
    name: Ultra-AutoMagic Android APK Build
    runs-on: ubuntu-22.04
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      JAVA_HOME: /usr/lib/jvm/adoptopenjdk-17-hotspot

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Install Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: ⚙️ Install Android SDK Commandline Tools
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d tools
          mv tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          rm sdk-tools.zip
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
          yes | sdkmanager --licenses || true
          sdkmanager --update || true
          sdkmanager "platform-tools" "build-tools;35.0.0" "platforms;android-35"
          echo "✅ Android SDK ready"

      - name: 🔑 Generate temporary keystore
        run: |
          mkdir -p android/app
          rm -f android/app/debug.keystore || true
          keytool -genkeypair -v \
            -keystore android/app/debug.keystore \
            -storepass android \
            -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias androiddebugkey \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "✅ Keystore generated"

      - name: 📦 Cache Gradle & Node Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            node_modules
          key: gradle-node-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/yarn.lock') }}

      - name: 📦 Install JS dependencies
        run: |
          yarn install --frozen-lockfile

      - name: 🧠 Super Pre-Build Doctor
        run: |
          set -e
          [ ! -f android/gradlew ] && (cd android && gradle wrapper && cd ..)
          if [ ! -f android/gradle.properties ]; then
            echo "org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8" > android/gradle.properties
            echo "android.useAndroidX=true" >> android/gradle.properties
            echo "android.enableJetifier=true" >> android/gradle.properties
          fi
          grep -q "compileSdkVersion" android/app/build.gradle || sed -i "/android {/a \    compileSdkVersion 35" android/app/build.gradle
          grep -q "org.jetbrains.kotlin.android" android/build.gradle 2>/dev/null && \
            sed -i -E 's/id\(\"org.jetbrains.kotlin.android\"\).*/id(\"org.jetbrains.kotlin.android\") version \"2.0.20\"/g' android/build.gradle || true
          grep -q "include ':app'" android/settings.gradle || echo "include ':app'" >> android/settings.gradle
          [ ! -d node_modules/react-native ] && yarn add react-native
          echo "✅ Super Pre-Build Doctor done"

      - name: 🛠️ Ultra-AutoMagic: patch modules & config
        run: |
          set -e
          find node_modules -type f -name "build.gradle" -print0 | xargs -0 -n1 -I{} perl -0777 -pe 's/\bcompile\b/implementation/g' -i {}
          find node_modules -type f -name "build.gradle" -print0 | xargs -0 -n1 -I{} perl -0777 -pe 's/compileSdkVersion\s+\d+/compileSdkVersion 35/g; s/targetSdkVersion\s+\d+/targetSdkVersion 35/g' -i {}
          find node_modules -type f -name "build.gradle" -print0 | xargs -0 -n1 -I{} perl -0777 -pe 's/sourceCompatibility\s*=.*/sourceCompatibility = JavaVersion.VERSION_17/g; s/targetCompatibility\s*=.*/targetCompatibility = JavaVersion.VERSION_17/g' -i {}
          grep -q "react.gradle" android/build.gradle || echo "apply from: '../node_modules/react-native/react.gradle'" >> android/build.gradle
          for pkg in react-native-i18n react-native-payments react-native-aes-crypto react-native-aes-crypto-forked react-native-crypto; do
            [ -d node_modules/$pkg ] && find node_modules/$pkg -type f -name "build.gradle" -exec sed -i -E 's/\bcompile\b/implementation/g' {} +
          done
          [ -d android/app/src/main/java ] && find android/app/src/main/java -type f -name "*.kt" -print0 | xargs -0 -n1 perl -0777 -pe 's/ReactApplicationContext/ReactContext/g; s/NativeModule/BaseJavaModule/g' -i {}
          PLACEHOLDERS="MM_BRANCH_KEY_LIVE=live_key_dummy,MM_BRANCH_KEY_TEST=test_key_dummy,isDebug=false"
          if [ "${{ inputs.metamask_environment }}" = "qa" ]; then
            PLACEHOLDERS="MM_BRANCH_KEY_LIVE=qa_live_key,MM_BRANCH_KEY_TEST=qa_test_key,isDebug=true"
          fi
          grep -q "manifestPlaceholders" android/app/build.gradle || \
            sed -i "/defaultConfig {/a \\
                \\ \\ \\ \\ manifestPlaceholders = [\\\n\\ \\ \\ \\ \\ \\ ${PLACEHOLDERS//,/\\\\,\\\\\\ }\\\n\\ \\ \\ \\ ]" android/app/build.gradle
          grep -q "org.gradle.jvmargs" android/gradle.properties || echo "org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8" >> android/gradle.properties
          cd android && ./gradlew clean --no-daemon || true && cd ..
          echo "✅ Ultra-AutoMagic prebuild done"

      - name: 🏗️ Build Debug & Release APKs with Retry
        run: |
          set -e
          cd android
          retry=0
          until [ $retry -ge 2 ]
          do
            ./gradlew assembleDebug assembleRelease --no-daemon && break
            echo "⚠️ Build failed, retrying after clean..."
            ./gradlew clean
            retry=$((retry+1))
          done
          cd ..

      - name: 📤 Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
