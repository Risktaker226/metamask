# Pure Android E2E build workflow - builds and signs APKs automatically

name: Build Android E2E APKs

on:
  workflow_call:
    outputs:
      apk-uploaded:
        description: 'Whether the APK was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.apk-uploaded }}
      aab-uploaded:
        description: 'Whether the AAB was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.aab-uploaded }}
    inputs:
      build_type:
        description: 'The type of build to perform'
        required: false
        default: 'main'
        type: string
      metamask_environment:
        description: 'The environment to build for'
        required: false
        default: 'qa'
        type: string
      keystore_target:
        description: 'The target to use for the keystore'
        required: false
        default: 'qa'
        type: string

jobs:
  build-android-apks:
    name: Build Android E2E APKs
    runs-on: ubuntu-22.04
    env:
      GRADLE_USER_HOME: /home/admin/_work/.gradle
    outputs:
      apk-uploaded: ${{ steps.upload-apk.outcome == 'success' }}
      aab-uploaded: ${{ steps.upload-aab.outcome == 'success' }}
      apk-target-path: ${{ steps.determine-target-paths.outputs.apk-target-path }}
      test-apk-target-path: ${{ steps.determine-target-paths.outputs.test-apk-target-path }}
      aab-target-path: ${{ steps.determine-target-paths.outputs.aab-target-path }}
      artifact_name: ${{ steps.determine-target-paths.outputs.artifact_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ‚úÖ Installe automatiquement l‚ÄôAndroid SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          components: platform-tools

      - name: Setup Android Build Environment
        uses: MetaMask/github-tools/.github/actions/setup-e2e-env@211837de0fe5589cb88bd78bd2fd3237e1e97f48
        with:
          platform: android
          setup-simulator: false
          configure-keystores: false
          target: ${{ inputs.keystore_target }}

      # üîê G√©n√©ration automatique du keystore
      - name: Generate Android Keystore Automatically
        run: |
          echo "üîë Generating temporary Android keystore..."
          mkdir -p android/app
          keytool -genkeypair \
            -v \
            -keystore android/app/debug.keystore \
            -storepass android \
            -keypass android \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias androiddebugkey \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "‚úÖ Keystore generated successfully"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Setup project dependencies with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            echo "üöÄ Setting up project..."
            yarn setup:github-ci --no-build-ios

      - name: Generate current fingerprint
        id: generate-fingerprint
        run: |
          FINGERPRINT=$(yarn fingerprint:generate)
          echo "fingerprint=$FINGERPRINT" >> "$GITHUB_OUTPUT"
          echo "Current fingerprint: ${FINGERPRINT}"

      - name: Determine target paths and Artifact Names
        id: determine-target-paths
        run: |
          if [[ "${{ inputs.build_type }}" == "flask" ]]; then
            {
              echo "apk-target-path=android/app/build/outputs/apk/flask/release"
              echo "artifact_name=app-flask-release"
            } >> "$GITHUB_OUTPUT"
          elif [[ "${{ inputs.build_type }}" == "main" ]]; then
            {
              echo "apk-target-path=android/app/build/outputs/apk/prod/release"
              echo "artifact_name=app-prod-release"
            } >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Error: build_type ${{ inputs.build_type }} is not valid"
            exit 1
          fi

      - name: Build Android E2E APK
        run: |
          echo "üèó Building APK..."
          export NODE_OPTIONS="--max-old-space-size=8192"
          cp android/gradle.properties.github android/gradle.properties
          yarn build:android:${{ inputs.build_type }}:e2e
        env:
          PLATFORM: android
          METAMASK_ENVIRONMENT: ${{ inputs.metamask_environment }}
          METAMASK_BUILD_TYPE: ${{ inputs.build_type }}
          CI: 'true'

      # üßæ Signature automatique du APK
      - name: Sign APK Automatically
        run: |
          echo "üîè Signing APK..."
          BUILD_TOOLS_PATH=$ANDROID_HOME/build-tools/34.0.0
          APK_PATH=${{ steps.determine-target-paths.outputs.apk-target-path }}/${{ steps.determine-target-paths.outputs.artifact_name }}.apk
          SIGNED_APK_PATH=${{ steps.determine-target-paths.outputs.apk-target-path }}/${{ steps.determine-target-paths.outputs.artifact_name }}-signed.apk

          $BUILD_TOOLS_PATH/zipalign -v -p 4 "$APK_PATH" "$SIGNED_APK_PATH"
          $BUILD_TOOLS_PATH/apksigner sign --ks android/app/debug.keystore --ks-key-alias androiddebugkey --ks-pass pass:android --key-pass pass:android "$SIGNED_APK_PATH"

          echo "‚úÖ Signed APK: $SIGNED_APK_PATH"

      - name: Upload Signed APK
        id: upload-apk
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build_type }}-${{ inputs.metamask_environment }}-signed.apk
          path: ${{ steps.determine-target-paths.outputs.apk-target-path }}/${{ steps.determine-target-paths.outputs.artifact_name }}-signed.apk
          retention-days: 7
          if-no-files-found: error
