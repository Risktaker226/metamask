# 🧱 Build Android E2E APKs Workflow
# Ce workflow est 100% autonome et fonctionne sur ubuntu-22.04
# Il installe le SDK Android, build l’APK et AAB, puis upload les artefacts.

name: Build Android E2E APKs

on:
  workflow_call:
    outputs:
      apk-uploaded:
        description: 'Whether the APK was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.apk-uploaded }}
      aab-uploaded:
        description: 'Whether the AAB was successfully uploaded'
        value: ${{ jobs.build-android-apks.outputs.aab-uploaded }}
        type: boolean
    inputs:
      build_type:
        description: 'The type of build to perform'
        required: false
        default: 'main'
        type: string
      metamask_environment:
        description: 'The environment to build for'
        required: false
        default: 'qa'
        type: string
      keystore_target:
        description: 'The target to use for the keystore'
        required: false
        default: 'qa'
        type: string

jobs:
  build-android-apks:
    name: Build Android E2E APKs
    runs-on: ubuntu-22.04

    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      GRADLE_USER_HOME: /home/runner/.gradle

    outputs:
      apk-uploaded: ${{ steps.upload-apk.outcome == 'success' }}
      aab-uploaded: ${{ steps.upload-aab.outcome == 'success' }}
      apk-target-path: ${{ steps.determine-target-paths.outputs.apk-target-path }}
      test-apk-target-path: ${{ steps.determine-target-paths.outputs.test-apk-target-path }}
      aab-target-path: ${{ steps.determine-target-paths.outputs.aab-target-path }}
      artifact_name: ${{ steps.determine-target-paths.outputs.artifact_name }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      # 🧩 Installation manuelle stable du SDK Android
      - name: 🧩 Setup Android SDK
        run: |
          echo "🧩 Installing Android SDK..."
          sudo mkdir -p /usr/local/lib/android/sdk
          cd /usr/local/lib/android/sdk
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d cmdline-tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          yes | sdkmanager --licenses
          yes | sdkmanager --update
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          echo "✅ Android SDK installed successfully"

      # ⚙️ Environnement de build (spécifique MetaMask)
      - name: ⚙️ Setup Android Build Environment
        uses: MetaMask/github-tools/.github/actions/setup-e2e-env@211837de0fe5589cb88bd78bd2fd3237e1e97f48
        with:
          platform: android
          setup-simulator: false
          configure-keystores: false
          target: ${{ inputs.keystore_target }}

      # 🔐 Génération d’un keystore local (temporaire)
      - name: 🔐 Generate Android Keystore
        run: |
          echo "🔑 Generating Android keystore..."
          mkdir -p android/app
          keytool -genkeypair \
            -v \
            -keystore android/app/debug.keystore \
            -storepass android \
            -keypass android \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias androiddebugkey \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "✅ Keystore ready"

      # ⚡ Cache Gradle
      - name: ⚡ Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 🧰 Setup des dépendances du projet
      - name: 🧰 Install project dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            echo "📦 Installing dependencies..."
            yarn install
            yarn setup:github-ci --no-build-ios

      # 🔍 Fingerprint (optionnel, pour traçabilité)
      - name: 🔍 Generate current fingerprint
        id: generate-fingerprint
        run: |
          FINGERPRINT=$(yarn fingerprint:generate)
          echo "fingerprint=$FINGERPRINT" >> "$GITHUB_OUTPUT"
          echo "Fingerprint: ${FINGERPRINT}"

      # 📂 Déterminer les chemins de build
      - name: 📂 Determine target paths
        id: determine-target-paths
        run: |
          if [[ "${{ inputs.build_type }}" == "flask" ]]; then
            echo "apk-target-path=android/app/build/outputs/apk/flask/release" >> "$GITHUB_OUTPUT"
            echo "test-apk-target-path=android/app/build/outputs/apk/androidTest/flask/release" >> "$GITHUB_OUTPUT"
            echo "aab-target-path=android/app/build/outputs/bundle/flaskRelease" >> "$GITHUB_OUTPUT"
            echo "artifact_name=app-flask-release" >> "$GITHUB_OUTPUT"
          else
            echo "apk-target-path=android/app/build/outputs/apk/prod/release" >> "$GITHUB_OUTPUT"
            echo "test-apk-target-path=android/app/build/outputs/apk/androidTest/prod/release" >> "$GITHUB_OUTPUT"
            echo "aab-target-path=android/app/build/outputs/bundle/prodRelease" >> "$GITHUB_OUTPUT"
            echo "artifact_name=app-prod-release" >> "$GITHUB_OUTPUT"
          fi

      # 🧱 Build APK et AAB
      - name: 🧱 Build Android APK & AAB
        run: |
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          cd android
          echo "🏗️ Building APK..."
          ./gradlew assembleRelease
          echo "🏗️ Building AAB..."
          ./gradlew bundleRelease
          echo "✅ Build finished successfully"

      # 📦 Upload APK
      - name: 📦 Upload APK Artifact
        id: upload-apk
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.determine-target-paths.outputs.artifact_name }}.apk
          path: ${{ steps.determine-target-paths.outputs.apk-target-path }}/*.apk
          if-no-files-found: error

      # 📦 Upload AAB
      - name: 📦 Upload AAB Artifact
        id: upload-aab
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.determine-target-paths.outputs.artifact_name }}.aab
          path: ${{ steps.determine-target-paths.outputs.aab-target-path }}/*.aab
          if-no-files-found: warn

      - name: ✅ Build summary
        run: |
          echo "🎉 Build completed successfully!"
          echo "APK uploaded: ${{ steps.upload-apk.outcome }}"
          echo "AAB uploaded: ${{ steps.upload-aab.outcome }}"
