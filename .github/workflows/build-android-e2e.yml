name: Build Android E2E APKs (Ultra-AutoMagic)

on:
  workflow_call:
    inputs:
      build_type:
        description: "The type of build to perform"
        required: false
        default: "main"
        type: string
      metamask_environment:
        description: "The environment to build for (qa/live)"
        required: false
        default: "qa"
        type: string

jobs:
  build-android-apks:
    name: Ultra-AutoMagic Android APK Build
    runs-on: ubuntu-22.04
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      JAVA_HOME: /usr/lib/jvm/adoptopenjdk-17-hotspot

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Install Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: ⚙️ Install Android SDK Commandline Tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d tools
          mv tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          rm sdk-tools.zip
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
          yes | sdkmanager --licenses || true
          sdkmanager --update || true
          sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"
          echo "✅ Android SDK ready"

      - name: 🔑 Generate temporary keystore
        run: |
          mkdir -p android/app
          rm -f android/app/debug.keystore || true
          keytool -genkeypair -v \
            -keystore android/app/debug.keystore \
            -storepass android \
            -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias androiddebugkey \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "✅ Keystore generated"

      - name: 📦 Cache Gradle & Node Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            node_modules
          key: gradle-node-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/yarn.lock') }}

      - name: 📦 Install JS dependencies
        run: |
          echo "📦 Installing JS deps..."
          yarn install --frozen-lockfile

      - name: 🛠️ Ultra-AutoMagic: patch modules & config project-wide
        run: |
          set -e
          echo "🛠️ 1) Replace deprecated 'compile' with 'implementation' (safely)"
          find node_modules -type f -name "build.gradle" -print0 \
            | xargs -0 -n1 -I{} sh -c "perl -0777 -pe \"s/\\bcompile\\b/implementation/g\" -i {} || true"

          echo "🛠️ 2) Force compileSdkVersion/targetSdkVersion >= 35 where present"
          find node_modules -type f -name "build.gradle" -print0 \
            | xargs -0 -n1 -I{} sh -c "perl -0777 -pe 's/compileSdkVersion\\s+\\d+/compileSdkVersion 35/g; s/targetSdkVersion\\s+\\d+/targetSdkVersion 35/g' -i {} || true"

          echo "🛠️ 3) Force Java compatibility (source/target -> 17) in gradle files"
          find node_modules -type f -name "build.gradle" -print0 \
            | xargs -0 -n1 -I{} sh -c "perl -0777 -pe 's/sourceCompatibility\\s*=\\s*JavaVersion\\.VERSION_\\d+/sourceCompatibility = JavaVersion.VERSION_17/g; s/targetCompatibility\\s*=\\s*JavaVersion\\.VERSION_\\d+/targetCompatibility = JavaVersion.VERSION_17/g; s/sourceCompatibility\\s+\\\"?\\d+\\\"?/sourceCompatibility = JavaVersion.VERSION_17/g; s/targetCompatibility\\s+\\\"?\\d+\\\"?/targetCompatibility = JavaVersion.VERSION_17/g' -i {} || true"

          echo "🛠️ 4) Ensure react.gradle is applied in android/build.gradle (if RN present)"
          if grep -q "node_modules/react-native/react.gradle" android/build.gradle 2>/dev/null; then
            echo " - react.gradle already referenced"
          else
            echo "apply from: '../node_modules/react-native/react.gradle'" >> android/build.gradle
            echo " - appended react.gradle include to android/build.gradle"
          fi

          echo "🛠️ 5) Auto-fix known module-specific problems (i18n, payments, aes, etc.)"
          # react-native-i18n: replace compile() and add implementation react-native if missing
          if [ -f node_modules/react-native-i18n/android/build.gradle ]; then
            sed -i -E 's/\\bcompile\\b/implementation/g' node_modules/react-native-i18n/android/build.gradle || true
            grep -q "com.facebook.react:react-native" node_modules/react-native-i18n/android/build.gradle || \
              sed -i "/dependencies {/a \\    implementation 'com.facebook.react:react-native:0.72.4'" node_modules/react-native-i18n/android/build.gradle || true
            echo " - patched react-native-i18n"
          fi

          # react-native-payments: force SDK >=30 in its gradle if exists
          if [ -f node_modules/react-native-payments/android/build.gradle ]; then
            sed -i -E 's/compileSdkVersion\\s+[0-9]+/compileSdkVersion 35/g' node_modules/react-native-payments/android/build.gradle || true
            echo " - patched react-native-payments"
          fi

          # generic sed safety for other known problematic packages (aes, crypto forks, etc.)
          for pkg in react-native-aes-crypto react-native-aes-crypto-forked react-native-crypto; do
            if [ -d "node_modules/$pkg" ]; then
              find node_modules/$pkg -type f -name "build.gradle" -exec sed -i -E 's/\\bcompile\\b/implementation/g' {} + || true
              echo " - patched $pkg"
            fi
          done

          echo "🛠️ 6) Fix Kotlin unresolved references for RN native modules under android/app/src"
          if [ -d android/app/src/main/java ]; then
            find android/app/src/main/java -type f -name "*.kt" -print0 \
              | xargs -0 -n1 -I{} sh -c "perl -0777 -pe 's/ReactApplicationContext/ReactContext/g; s/NativeModule/BaseJavaModule/g; s/import com.facebook.react.bridge.NativeModule;/import com.facebook.react.bridge.BaseJavaModule;/' -i {}" || true
          fi

          echo "🛠️ 7) Add manifest placeholders (Branch + isDebug) if missing"
          PLACEHOLDERS="MM_BRANCH_KEY_LIVE=live_key_dummy,MM_BRANCH_KEY_TEST=test_key_dummy,isDebug=false"
          if [ \"${{ inputs.metamask_environment }}\" = \"qa\" ]; then
            PLACEHOLDERS=\"MM_BRANCH_KEY_LIVE=qa_live_key,MM_BRANCH_KEY_TEST=qa_test_key,isDebug=true\"
          fi
          if ! grep -q "manifestPlaceholders" android/app/build.gradle 2>/dev/null; then
            sed -i \"/defaultConfig {/a \\\
                \\ \\ \\ \\ manifestPlaceholders = [\\\n\\ \\ \\ \\ \\ \\ ${PLACEHOLDERS//,/\\\\,\\\\\\ }\\\n\\ \\ \\ \\ ]\" android/app/build.gradle || true
            echo " - manifestPlaceholders inserted"
          else
            echo " - manifestPlaceholders already present"
          fi

          echo "🛠️ 8) Sanity: ensure android/gradle.properties has enough JVM memory"
          if ! grep -q "org.gradle.jvmargs" android/gradle.properties 2>/dev/null; then
            echo "org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8" >> android/gradle.properties
            echo " - added org.gradle.jvmargs"
          fi

          echo "🛠️ 9) Final clean before build"
          cd android
          ./gradlew clean --no-daemon || true
          cd ..
          echo "✅ Ultra-AutoMagic prebuild done"

      - name: 🏗️ Build Debug & Release APKs (safe)
        run: |
          set -e
          cd android
          # Try incremental assemble, fallback to full assemble on failure
          ./gradlew assembleDebug assembleRelease --no-daemon || ( echo "Retrying full clean + assemble"; ./gradlew clean && ./gradlew assembleDebug assembleRelease )
          cd ..

      - name: 📤 Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
